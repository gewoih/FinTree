using System.Globalization;
using FinTree.Domain.Accounts;
using FinTree.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace FinTree.Infrastructure.Telegram;

public class TelegramBotHostedService(
    TelegramBotClient botClient,
    IServiceProvider serviceProvider,
    ILogger<TelegramBotHostedService> logger)
    : BackgroundService
{
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        var receiverOptions = new ReceiverOptions
        {
            AllowedUpdates = [UpdateType.Message, UpdateType.CallbackQuery]
        };

        botClient.StartReceiving(HandleUpdateAsync, HandleErrorAsync, receiverOptions, stoppingToken);

        var commands = new[]
        {
            new BotCommand { Command = "expense", Description = "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥" }
        };

        try
        {
            await botClient.SetMyCommands(commands, cancellationToken: stoppingToken);
        }
        catch (Exception ex)
        {
            logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞");
        }

        await Task.Delay(Timeout.Infinite, stoppingToken);
    }

    private Task HandleErrorAsync(ITelegramBotClient arg1, Exception arg2, CancellationToken arg3)
    {
        throw new NotImplementedException();
    }

    private async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken ct)
    {
        try
        {
            switch (update.Type)
            {
                case UpdateType.Message when update.Message!.Type == MessageType.Text:
                    await OnMessage(update.Message!, ct);
                    break;
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "HandleUpdate failed");
        }
    }
    
    private async Task OnMessage(Message msg, CancellationToken ct)
    {
        var scope = serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        
        var chatId = msg.Chat.Id;
        var text = (msg.Text ?? string.Empty).Trim();

        if (text.Equals("/start", StringComparison.OrdinalIgnoreCase))
        {
            await botClient.SendMessage(chatId,
                "–ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`{—Å—É–º–º–∞} {–∫–∞—Ç–µ–≥–æ—Ä–∏—è} {–∑–∞–º–µ—Ç–∫–∞?}`\n–ù–∞–ø—Ä–∏–º–µ—Ä: `2400 –ø—Ä–æ–¥—É–∫—Ç—ã`",
                parseMode: ParseMode.Markdown,
                cancellationToken: ct);
            return;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ "—Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–º–µ—Ç–∫–∞?"
        if (!TryParseExpense(text, out var amount, out var categoryName, out var note))
        {
            await botClient.SendMessage(chatId,
                "–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏—à–ª–∏: `2400 –ø—Ä–æ–¥—É–∫—Ç—ã` –∏–ª–∏ `1300 –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é`.",
                parseMode: ParseMode.Markdown,
                cancellationToken: ct);
            return;
        }

        // –†–µ–∑–æ–ª–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–º–µ–Ω–∞
        var user = await context.Users
            .Include(u => u.Accounts)
            .ThenInclude(u => u.Currency)
            .Where(u => u.TelegramUserId == msg.From.Username)
            .FirstOrDefaultAsync(cancellationToken: ct);
        
        if (user is null)
        {
            await botClient.SendMessage(chatId,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à Telegram —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü—Ä–æ–π–¥–∏—Ç–µ –ª–∏–Ω–∫-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                cancellationToken: ct);
            return;
        }

        // –û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç
        var account = user.Accounts.FirstOrDefault(a => a.IsMain);
        if (account is null)
        {
            await botClient.SendMessage(chatId,
                "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ/–Ω–∞–∑–Ω–∞—á—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.",
                cancellationToken: ct);
            return;
        }

        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        var category = await context.TransactionCategories
            .Where(t => t.UserId == user.Id || !t.UserId.HasValue)
            .Where(t => t.Name.ToLower() == categoryName.ToLower())
            .FirstOrDefaultAsync(cancellationToken: ct);

        if (category is not null)
        {
            try
            {
                account.AddExpense(category.Id, amount, DateTime.UtcNow, note);
                await context.SaveChangesAsync(ct);
                
                await botClient.SendMessage(chatId,
                    $"‚úÖ –î–æ–±–∞–≤–∏–ª —Ä–∞—Å—Ö–æ–¥:\n" +
                    $"üí≥ –°—á—ë—Ç: {account.Name} ({account.Currency.Code})\n" +
                    $"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.Name}\n" +
                    $"üí∞ –°—É–º–º–∞: {FormatAmount(amount, account)}\n" +
                    (string.IsNullOrWhiteSpace(note) ? "" : $"üìù –ó–∞–º–µ—Ç–∫–∞: {note}\n"),
                    ParseMode.Html,
                    cancellationToken: ct);
            }
            catch (Exception)
            {
                await botClient.SendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", cancellationToken: ct);
            }
            
            return;
        }

        var shortNote = (note ?? "").Trim();
        if (shortNote.Length > 28) shortNote = shortNote[..28]; // —á—Ç–æ–±—ã callback –≤–ª–µ–∑
        var data = BuildCallbackData(amount, shortNote); // expyes:{amount}:{note}

        var preview =
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n" +
            $"–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ <b>–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>?\n\n" +
            $"üí≥ –°—á—ë—Ç: {account.Name} ({account.Currency.Code})\n" +
            $"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <i>‚Äî</i>\n" +
            $"üí∞ –°—É–º–º–∞: {FormatAmount(amount, account)}\n" +
            (string.IsNullOrEmpty(shortNote) ? "" : $"üìù –ó–∞–º–µ—Ç–∫–∞: {shortNote}\n");

        var kb = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("‚úÖ –î–∞", data),
                InlineKeyboardButton.WithCallbackData("‚ùå –ù–µ—Ç", "expno")
            }
        });

        await botClient.SendMessage(chatId, preview, ParseMode.Html, replyMarkup: kb, cancellationToken: ct);
    }
    
    private static bool TryParseExpense(string text, out decimal amount, out string category, out string? note)
    {
        amount = 0; category = ""; note = null;

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–æ—á–∫–∏/–∑–∞–ø—è—Ç—ã–µ –¥–ª—è —Å—É–º–º—ã
        var parts = text.Split(' ', 3, StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length < 2) return false;

        // –†–∞–∑–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ —Å –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π –∏ —Å –∑–∞–ø—è—Ç–æ–π
        var sumRaw = parts[0].Replace(',', '.');
        if (!decimal.TryParse(sumRaw, NumberStyles.Number, CultureInfo.InvariantCulture, out amount))
            return false;

        if (amount <= 0) return false;

        category = parts[1].Trim();
        note = parts.Length == 3 ? parts[2].Trim() : null;
        return !string.IsNullOrWhiteSpace(category);
    }

    private static string FormatAmount(decimal amount, Account account)
        => $"{amount:0.##} {account.Currency.Symbol}";

    private static string BuildCallbackData(decimal amount, string note)
    {
        var amt = amount.ToString("0.##", CultureInfo.InvariantCulture);
        note = note.Replace(":", " ");
        var data = $"expyes:{amt}:{note}";
        return data.Length <= 64 ? data : $"expyes:{amt}:"; // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    }
}